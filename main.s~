; Caratteri LCD
ROBO_SPRITE =   %11001110
GROUND_SPRITE = %01011111
HURDLE_SPRITE = %10101101
BLANK_SPRITE =  %11111110

; Costanti di gioco
DRAW_LOOP_WAIT_TIME = $aa       ; Controlla la velocità del gioco (valore più basso = velocità di gioco più veloce)
GAME_OVER_WAIT_TIME = $99       ; Controlla l'animazione lampeggiante alla fine del gioco
ROBO_JUMP_UP_TIME   = 3         ; Spazi che il robot può saltare
HURDLE_SPACING      = 7         ; Spazi tra i respawn degli ostacoli
HURDLE_POSITION_BYTES = 4       ; Byte della posizione degli ostacoli

; Posizioni di memoria dello stack - 0100 -> 01FF
; Posizioni di memoria RAM - 0200 -> 3FFF (Gamma completa 0000-3FFF)
robo_position   = $0200         ; 1 byte (6 bit per rappresentare la posizione del cursore dello schermo LCD)
robo_jump_time  = $0201         ; 1 byte (contiene i cicli di disegno rimanenti quando il robot è sulla linea superiore)
hurdle_spacing_count = $0202    ; 1 byte (impostato da `HURDLE_SPACING`, aggiunge un ostacolo al percorso)
hurdle_spawn_position = $0203   ; 1 byte (memorizza l'indirizzo di spawn degli ostacoli)
init_draw_cursor    = $0204     ; 1 byte (usato durante l'inizializzazione per disegnare la prima schermata)
hurdle_count    = $0205         ; 1 byte (# di ostacoli presenti sullo schermo)
robo_score_display_position = $0206 ; 1 byte (memorizza la posizione di visualizzazione del punteggio del giocatore)
robo_score      = $0207         ; 1 byte (memorizza il punteggio del giocatore)
hurdle_position = $0208         ; 4 byte (memorizza le posizioni degli ostacoli per il controllo delle collisioni (4 + 1 byte terminale nullo))

; Indirizzi di memoria ROM 8000 -> FFFF
    .org $8000
    jmp reset                       ; salta al metodo di reset in bootstrap.s per avviare
; Librerie di codice
    .include "./lib/1602a-lcd.s"    ; include la libreria 1602a
    .include "./lib/bootstrap.s"    ; programma di avvio
    
entrypoint:
    jsr draw_init_screen

; Ciclo principale di disegno
draw_loop:
    jsr draw_hurdle             ; disegna l'ostacolo
    jsr draw_robo_sprite        ; disegna lo sprite del robot
    jsr draw_score              ; disegna il punteggio dell'utente
    jsr calculate_collision     ; calcola la collisione
    lda #DRAW_LOOP_WAIT_TIME    ; imposta il tempo di attesa
    jsr wait                    ; attesa del ciclo di disegno per la velocità del gioco
    jmp draw_loop

; Sottoprogrammi di gioco
draw_init_screen:
    lda #LCD_ADDR_TOP_RIGHT_CORNER
    sta robo_score_display_position     ; Inizializza la posizione di visualizzazione del punteggio del robot
    stz hurdle_count                    ; Inizializza il conteggio degli ostacoli a 0
    stz robo_score                      ; Inizializza il punteggio del robot a 0
    stz hurdle_spacing_count            ; Inizializza il conteggio dello spazio dell'ostacolo a 0
    stz robo_jump_time                  ; Inizializza il flag di salto del robot a 0

    ldx #0                              ; Inizializza le posizioni degli ostacoli a 0
init_hurdle_position_loop:
    stz hurdle_position,x
    inx
    cpx #HURDLE_POSITION_BYTES
    bne init_hurdle_position_loop

    lda #%11010000                      ; Imposta la seconda riga 16° carattere
    sta hurdle_spawn_position           ; Memorizza la posizione di spawn dell'ostacolo
    lda #LCD_ADDR_LAST_ROW_FIRST_CHAR   ; Imposta il cursore alla seconda riga primo carattere
    sta init_draw_cursor                ; Memorizza l'inizio del disegno dello schermo
    sta robo_position                   ; Memorizza la posizione iniziale del robot
    inc robo_position
    jsr lcd_instruction                 ; Imposta il cursore di partenza alla seconda riga primo carattere

; loop attraverso 40H - 67H per disegnare gli sprite di gioco
draw_init_course:
    cmp robo_position               ; se robo_position, disegna lo sprite del robot
    bne draw_ground                 ; altrimenti disegna lo sprite del terreno
    lda #ROBO_SPRITE
    jsr print_char
    jmp end_init_draw_check
; disegna lo sprite del terreno
draw_ground:
    lda #GROUND_SPRITE
    jsr print_char
; fine > 67H
end_init_draw_check:
    lda init_draw_cursor
    inc init_draw_cursor
    cmp #LCD_ADDR_LAST_ROW_LAST_CHAR
    bne draw_init_course
draw_init_end:
    rts

; Sottoprogramma per calcolare la posizione e disegnare l'ostacolo
draw_hurdle:
    inc hurdle_spawn_position
    lda hurdle_spawn_position
    cmp #LCD_ADDR_LAST_ROW_LAST_CHAR   ; Reimposta il contatore all'ultimo indirizzo per la seconda riga
    bne draw_hurdle_check_spacing
reset_hurdle_spawn:
    lda #LCD_ADDR_LAST_ROW_FIRST_CHAR  ; Imposta il cursore alla seconda riga primo carattere
    sta hurdle_spawn_position          ; Memorizza la posizione di spawn dell'ostacolo
draw_hurdle_check_spacing:
    inc hurdle_spacing_count
    lda hurdle_spacing_count
    cmp #HURDLE_SPACING
    bmi draw_hurdle_end
draw_hurdle_draw:
    lda hurdle_count                ; Assicurarsi che hurdle_count non superi la dimensione della posizione dell'ostacolo
    cmp #HURDLE_POSITION_BYTES - 1  ; va oltre la dimensione della posizione dell'ostacolo
    beq draw_hurdle_end
    stz hurdle_spacing_count        ; Reimposta `hurdle_spacing_count`
    lda hurdle_spawn_position       ; Carica il respawn dell'ostacolo
    jsr set_cursor_address
    lda #HURDLE_SPRITE
    jsr print_char
    ldy hurdle_count
    lda hurdle_spawn_position
    sta hurdle_position,y
    inc hurdle_count
    rts
draw_hurdle_end:
    lda hurdle_spawn_position   ; Carica il respawn dell'ostacolo
    jsr set_cursor_address
    lda #GROUND_SPRITE          ; Nessun ostacolo, disegna il terreno
    jsr print_char
    rts

; Sottoprogramma per calcolare la posizione e i salti per disegnare lo sprite del robot
draw_robo_sprite:
    jsr set_robo_position_to_ground     ; Imposta il robot sul terreno
    ldx robo_position                   ; Memorizza la posizione precedente del robot
    inc robo_position                   ; Incrementa la posizione del robot in memoria a quella attuale
    lda robo_position                   ; Reimposta la posizione se supera il limite dell'indirizzo LCD
    cmp #LCD_ADDR_SECOND_OVERFLOW       ; Reimposta il contatore se oltrepassa l'ultimo indirizzo per la seconda riga
    bne draw_robo_sprite_check_jump
reset_robo_counter:
    lda #LCD_ADDR_LAST_ROW_FIRST_CHAR   ; Imposta il cursore alla seconda riga primo carattere
    sta robo_position                   ; Memorizza la posizione iniziale del robot
draw_robo_sprite_check_jump:
    lda robo_jump_time                  ; Controlla robo_jump_time
    cmp #0
    beq draw_robo_sprite_redraw
handle_robo_jump_time:
    dec robo_jump_time
    lda robo_position               ; Imposta robo_position alla linea 1
    and #%10111111                  ; 0 a D6 è la linea 1 per LCD
    sta robo_position
draw_robo_sprite_redraw:
    txa                             ; Cancella lo sprite del robot precedente
    jsr set_cursor_address
    lda #GROUND_SPRITE              ; Disegna il terreno sulla posizione precedente
    jsr print_char
    txa 
    and #%10111111                  ; Cancella anche lo sprite della riga superiore
    jsr set_cursor_address
    lda #BLANK_SPRITE
    jsr print_char
    lda #LCD_SHIFT_DISPLAY_LEFT     ; Sposta a sinistra il display/caratteri
    jsr lcd_instruction             ; fatto mentre il robot non è sul display per rimuovere l'immagine residua
    lda robo_position               ; disegna il robot nella nuova posizione
    jsr set_cursor_address
    lda #ROBO_SPRITE
    jsr print_char
set_robo_position_to_ground:
    lda robo_position                   ; reimposta la posizione dall'eventuale aggiustamento del salto
    ora #%01000000                      ; Imposta alla seconda riga
    sta robo_position                   ; Memorizza la posizione in memoria
    rts

; Disegna il punteggio del giocatore
draw_score:
    dec robo_score_display_position     ; Vai alla vecchia posizione della cifra delle decine
    lda robo_score_display_position
    cmp #%01111111                      ; Controlla se era nella posizione di partenza
    bne draw_score_clear_previous
    lda #LCD_ADDR_FIRST_OVERFLOW - 1    ; Sposta la posizione all'ultima posizione per sovrascrivere BLANK
draw_score_clear_previous:
    jsr set_cursor_address
    lda #BLANK_SPRITE
    jsr print_char
    inc robo_score_display_position     ; Cancella la posizione delle unità vecchie
    lda robo_score_display_position
    jsr set_cursor_address
    lda #BLANK_SPRITE
    jsr print_char
    inc robo_score_display_position     ; Sposta la posizione alla nuova posizione dello schermo LCD
    lda robo_score_display_position
    cmp #LCD_ADDR_FIRST_OVERFLOW        ; Controlla se la nuova posizione è overflow
    bne draw_robo_score
reset_count_display:                    ; Reimposta la nuova posizione alla prima posizione dello schermo LCD
    clc                                 ; Cancella il bit di carry per correggere il bug di visualizzazione dell'overflow del punteggio
    lda #%10000000
    sta robo_score_display_position
draw_robo_score:
    ldx robo_score                      ; Inizializza il resto
    ldy #0                              ; Inizializza la cifra delle decine
    lda robo_score
draw_robo_score_loop:                   ; Controlla se è necessaria la cifra delle decine
    sbc #9
    bcs set_next_decimal
    lda robo_score_display_position     ; Imposta le unità quando < 10
    jsr set_cursor_address
    txa
    adc #"0"
    jsr print_char
    rts
set_next_decimal:
    tax
    dec robo_score_display_position
    lda robo_score_display_position
    cmp #%01111111
    bne set_next_decimal_draw
    lda #LCD_ADDR_FIRST_OVERFLOW - 1
set_next_decimal_draw:
    jsr set_cursor_address
    inc robo_score_display_position
    iny
    tya
    adc #"0" - 1
    jsr print_char
    txa
    jmp draw_robo_score_loop

; Controlla robo_position con l'ostacolo più vicino per determinare lo stato del gioco
calculate_collision:
    lda robo_position           ; Confronta la posizione del robot (dal terreno) e l'ostacolo più vicino
    cmp hurdle_position
    beq jump_check
    rts
jump_check:
    lda robo_jump_time
    cmp #0
    beq game_over               ; Se il robot sta saltando, pulisce gli ostacoli. Altrimenti, fine del gioco
clean_stale_hurdles:
    ldx #1                      ; "Prossimo" ostacolo
    ldy #0                      ; "Ostacolo" corrente
    dec hurdle_count            ; diminuisce gli ostacoli totali
    inc robo_score              ; Superato un ostacolo! +1!
clean_stale_hurdles_loop:
    lda hurdle_position,x       ; Carica la posizione dell'ostacolo "Successivo"       
    sta hurdle_position,y       ; Memorizza "Successivo" in "Ostacolo" corrente
    inx                         ; Passa alle prossime posizioni degli ostacoli
    iny     
    lda hurdle_position,x       ; Osserva la posizione dell'ostacolo "Successivo"
    cmp #0                      ; se vuoto, abbiamo raggiunto la fine degli ostacoli
    bne clean_stale_hurdles_loop; ripeti fino a raggiungere la fine
    rts

; Fine del gioco, disegna il messaggio e invia al loop di fine del gioco
game_over:
    jsr game_over_flicker
    ldx #0
    lda robo_position           ; stampa il messaggio sopra il robot
    and #%10111111              ; Imposta alla linea uno
    tay                         ; tiene l'indirizzo del cursore in Y
    jsr set_cursor_address
    jmp game_over_message_draw  ; Non c'è bisogno di controllare il cursore alla prima esecuzione
game_over_message_line_check:           ; controlla per far stampare il messaggio su una sola riga LCD
    tya                                 ; tiene l'indirizzo del cursore in Y
    cmp #LCD_ADDR_FIRST_OVERFLOW
    bne game_over_message_draw          ; imposta l'indirizzo del cursore alla prima riga se sulla seconda riga
    lda #LCD_ADDR_FIRST_ROW_FIRST_CHAR
    tay
    jsr set_cursor_address
game_over_message_draw:
    lda game_over_message,x             ; Loop sul messaggio di fine gioco
    beq game_over_loop
    jsr print_char
    inx                                 ; aumenta il puntatore del messaggio
    iny                                 ; aumenta il puntatore del cursore
    jmp game_over_message_line_check    ; controlla se si è lasciato la prima riga
game_over_loop:
    jmp game_over_loop
game_over_flicker:
    lda #0 
    .rept 3
    jsr wait
    lda #LCD_SCREEN_OFF
    jsr lcd_instruction
    lda #GAME_OVER_WAIT_TIME
    jsr wait
    lda #LCD_SCREEN_ON
    jsr lcd_instruction
    lda #GAME_OVER_WAIT_TIME
    .endr
    rts

game_over_message: .asciiz "Fine del gioco"

; Sottoprogramma per il ciclo di disegno per controllare la velocità del gioco
; Carica il tempo di attesa in A prima della chiamata
wait:
    tax
    tay
wait_loop:
    dex
    txa
    cmp #0
    bne wait_loop
    dey 
    tya
    cmp #0
    bne wait_loop
    rts

; Sottoprogrammi di interrupt
; Imposta il flag di salto del robot se non è già impostato
set_robo_jump_time:
    pha
    lda robo_jump_time
    cmp #0
    bne set_robo_jump_time_end  ; Salta solo se robo_jump_time == 0
    lda #ROBO_JUMP_UP_TIME
    sta robo_jump_time
set_robo_jump_time_end:
    pla
    rts

nmi:
    ; rti

irq:
    jsr set_robo_jump_time
exit_irq:
    bit PORTA
    rti                     ; Ritorna dall'interrupt 

    .org $fffa
    .word nmi
    .word reset
    .word irq

